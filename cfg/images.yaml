functions:
  f_ssdn:
    - "x"
    - "x"
    - "x"
    - "scaled(ssdn(eqsize(x,y,c)...))"
  f_cov:
    - "x"
    - "x"
    - "x"
    - "scaled(cov(eqsize(x,y,c)...))"
  f_cor:
    - "x"
    - "x"
    - "x"
    - "scaled(cor(eqsize(x,y,c)...))"
  f_centered_filter:
    - "x"
    - "scaled(imfilter(x,centered(x)))"
  f_restrict:
    - "x"
    - "restrict(x)"
  f_dilate:
    - "x"
    - "dilate(x)"
  f_erode:
    - "x"
    - "erode(x)"
  f_opening:
    - "x"
    - "opening(x)"
  f_closing:
    - "x"
    - "closing(x)"
  f_tophat:
    - "x"
    - "scaled(tophat(x))"
  f_bothat:
    - "x"
    - "scaled(bothat(x))"
  f_morphogradient:
    - "x"
    - "scaled(morphogradient(x))"
  f_morpholaplace:
    - "x"
    - "scaled(morpholaplace(x))"
  f_integral_image:
    - "x"
    - "scaled(integral_image(x))"
  f_circshift:
    - "x"
    - "circshift(x, round((c+1.0)*length(x)/2.0))"
  f_shift_up:
    - "x"
    - "circshift(x, -round((c+1.0)*size(x,1)/2.0))"
  f_shift_down:
    - "x"
    - "circshift(x, round((c+1.0)*size(x,2)/2.0))"
  f_shift_left:
    - "x"
    - "if ndims(x)==2; return circshift(x, (0, -round((c+1.0)*size(x,2)/2.0))); else; return x; end"
  f_shift_right:
    - "x"
    - "if ndims(x)==2; return circshift(x, (0, round((c+1.0)*size(x,2)/2.0))); else; return x; end"
  f_xcorr:
    - "x"
    - "x"
    - "x"
    - "scaled(xcorr(map(x->vec(x), eqsize(x,y,c))...))"
  f_imfilter:
    - "x"
    - "x"
    - "scaled(imfilter(x, centered(x)))"
    - "scaled(imfilter(x, centered(x)))"
  f_sobel_filter:
    - "x"
    - "if ndims(x)==2; return scaled(imfilter(x,KernelFactors.sobel((true,true),2))); else; return x; end"
  f_prewitt_filter:
    - "x"
    - "if ndims(x)==2; return scaled(imfilter(x,KernelFactors.prewitt((true,true),2))); else; return x; end"
  f_ando3_filter:
    - "x"
    - "if ndims(x)==2; return scaled(imfilter(x,KernelFactors.ando3((true,true),2))); else; return x; end"
  f_sobel_gradient:
    - "x"
    - "scaled(index_in(imgradients(x, KernelFactors.sobel), (c+1.0)/2.0))"
  f_prewitt_gradient:
    - "x"
    - "scaled(index_in(imgradients(x, KernelFactors.prewitt), (c+1.0)/2.0))"
  f_ando3_gradient:
    - "x"
    - "scaled(index_in(imgradients(x, KernelFactors.ando3), (c+1.0)/2.0))"
  f_sobel_edge:
    - "x"
    - "if ndims(x)==2; return scaled(index_in(imedge(x, KernelFactors.sobel), (c+1.0)/2.0)); else; return x; end"
  f_prewitt_edge:
    - "x"
    - "if ndims(x)==2; return scaled(index_in(imedge(x, KernelFactors.prewitt), (c+1.0)/2.0)); else; return x; end"
  f_ando3_edge:
    - "x"
    - "if ndims(x)==2; return scaled(index_in(imedge(x, KernelFactors.ando3), (c+1.0)/2.0)); else; return x; end"
  f_sadn:
    - "x"
    - "x"
    - "x"
    - "scaled(sadn(eqsize(x,y,c)...))"
  f_fftshift:
    - "x"
    - "fftshift(x)"
  f_rfft:
    - "x"
    - "scaled(real(rfft(x)))"
  f_dct:
    - "x"
    - "scaled(dct(x))"
  f_flipdim:
    - "x"
    - "flipdim(x, index_in(collect(1:ndims(x)), y))"
  f_cumprod:
    - "x"
    - "cumprod(x, index_in(collect(1:ndims(x)), y))"
  f_cumsum:
    - "x"
    - "scaled(cumsum(x, index_in(collect(1:ndims(x)), y)))"
  f_cummax:
    - "x"
    - "accumulate(max, x, index_in(collect(1:ndims(x)), y))"
  f_indmax:
    - "x"
    - "scaled_indmax(x)"
  f_felzenszwalb:
    - "x"
    - "segmentation(x, 2000*(c+1), felzenszwalb)"
  # f_fastcorners:
  #   - "x"
  #   - "scaled(Float64.(fastcorners(x)))"
  # f_gaussian_filter:
  #   - "x"
  #   - "scaled(imfilter(x,KernelFactors.gaussian(mean(abs.(y)))))"
  # f_laplacian_filter:
  #   - "x"
  #   - "scaled(imfilter(x,Kernel.Laplacian((true,true))))"
  # f_imresize:
  #   - "x"
  #   - "if (ndims(x) == 2 && all(size(x) .> 1)); return imresize(x, Tuple(Int64.(ceil.(((c+1.0)/2.0).*[size(x)...])))); else; return x; end"
